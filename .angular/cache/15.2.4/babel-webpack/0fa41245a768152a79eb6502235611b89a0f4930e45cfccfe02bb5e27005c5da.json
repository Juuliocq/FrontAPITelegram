{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { timeout } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiServiceService {\n  constructor(http) {\n    this.http = http;\n    this.API = 'http://localhost:8088/tgbot';\n  }\n  getApiOnline() {\n    return this.http.get(this.API + \"/actuator/health\", {\n      observe: 'response',\n      headers: this.getHeader(\"/actuator/health\")\n    }).pipe(timeout(2000));\n  }\n  restart() {\n    return this.http.post(this.API + \"/actuator/restart\", {}).pipe(timeout(150));\n  }\n  getToken() {\n    return this.http.get(this.API + \"/token\", {\n      headers: this.getHeader(\"/token\")\n    });\n  }\n  getIp() {\n    return this.http.get(this.API + \"/ipArduino\", {\n      headers: this.getHeader(\"/ipArduino\")\n    });\n  }\n  setToken(token) {\n    return this.http.patch(this.API + \"/token\", token, {\n      headers: this.getHeader(\"/token\")\n    });\n  }\n  setIp(ip) {\n    return this.http.patch(this.API + \"/ipArduino\", ip, {\n      headers: this.getHeader(\"/ipArduino\")\n    });\n  }\n  getHeader(url) {\n    return new HttpHeaders().set('Access-Control-Allow-Origin', this.API + url);\n  }\n}\nApiServiceService.ɵfac = function ApiServiceService_Factory(t) {\n  return new (t || ApiServiceService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiServiceService,\n  factory: ApiServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,OAAO,QAAQ,MAAM;;;AAO1C,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,QAAG,GAAG,6BAA6B;EAEb;EAEvCC,YAAY;IACV,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,GAAG,kBAAkB,EACjD;MAACC,OAAO,EAAE,UAAU;MAAEC,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,kBAAkB;IAAC,CAAC,CAAC,CAACC,IAAI,CAACV,OAAO,CAAC,IAAI,CAAC,CAAC;EAC1F;EAEAW,OAAO;IACL,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAC,IAAI,CAACN,GAAG,GAAG,mBAAmB,EAAE,EAAE,CAAC,CAACI,IAAI,CAACV,OAAO,CAAC,GAAG,CAAC,CAAC;EAC9E;EAEAa,QAAQ;IACN,OAAO,IAAI,CAACV,IAAI,CAACE,GAAG,CAAQ,IAAI,CAACC,GAAG,GAAG,QAAQ,EAAE;MAACE,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,QAAQ;IAAC,CAAC,CAAC;EACvF;EAEAK,KAAK;IACH,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAK,IAAI,CAACC,GAAG,GAAG,YAAY,EAAE;MAACE,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,YAAY;IAAC,CAAC,CAAC;EAC5F;EAEAM,QAAQ,CAACC,KAAY;IACnB,OAAO,IAAI,CAACb,IAAI,CAACc,KAAK,CAAQ,IAAI,CAACX,GAAG,GAAG,QAAQ,EAAEU,KAAK,EAAE;MAACR,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,QAAQ;IAAC,CAAC,CAAC;EAChG;EAEAS,KAAK,CAACC,EAAM;IACV,OAAO,IAAI,CAAChB,IAAI,CAACc,KAAK,CAAK,IAAI,CAACX,GAAG,GAAG,YAAY,EAAEa,EAAE,EAAE;MAACX,OAAO,EAAE,IAAI,CAACC,SAAS,CAAC,YAAY;IAAC,CAAC,CAAC;EAClG;EAEQA,SAAS,CAACW,GAAW;IAC3B,OAAO,IAAIrB,WAAW,EAAE,CAACsB,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACf,GAAG,GAAGc,GAAG,CAAC;EAC7E;;AAjCWnB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;SAAjBA,iBAAiB;EAAAqB,SAAjBrB,iBAAiB;EAAAsB,YAFhB;AAAM","names":["HttpHeaders","timeout","ApiServiceService","constructor","http","getApiOnline","get","API","observe","headers","getHeader","pipe","restart","post","getToken","getIp","setToken","token","patch","setIp","ip","url","set","factory","providedIn"],"sourceRoot":"","sources":["C:\\git\\front api telegram\\APITelegramFront\\src\\app\\service\\api-service.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, timeout } from 'rxjs';\r\nimport { Token } from '../componentes/token';\r\nimport { Ip } from '../componentes/ip';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiServiceService {\r\n\r\n  private readonly API = 'http://localhost:8088/tgbot';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getApiOnline() {\r\n    return this.http.get(this.API + \"/actuator/health\",\r\n     {observe: 'response', headers: this.getHeader(\"/actuator/health\")}).pipe(timeout(2000));\r\n  }\r\n\r\n  restart() {\r\n    return this.http.post(this.API + \"/actuator/restart\", {}).pipe(timeout(150));\r\n  }\r\n\r\n  getToken() {\r\n    return this.http.get<Token>(this.API + \"/token\", {headers: this.getHeader(\"/token\")});\r\n  }\r\n\r\n  getIp() {\r\n    return this.http.get<Ip>(this.API + \"/ipArduino\", {headers: this.getHeader(\"/ipArduino\")});\r\n  }\r\n\r\n  setToken(token: Token): Observable<Token> {\r\n    return this.http.patch<Token>(this.API + \"/token\", token, {headers: this.getHeader(\"/token\")});\r\n  }\r\n\r\n  setIp(ip: Ip): Observable<Ip> {\r\n    return this.http.patch<Ip>(this.API + \"/ipArduino\", ip, {headers: this.getHeader(\"/ipArduino\")});\r\n  }\r\n\r\n  private getHeader(url: string) {\r\n    return new HttpHeaders().set('Access-Control-Allow-Origin', this.API + url)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}